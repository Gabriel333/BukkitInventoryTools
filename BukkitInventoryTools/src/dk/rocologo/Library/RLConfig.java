package dk.rocologo.Library;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

import org.bukkit.plugin.Plugin;
import org.bukkit.util.config.Configuration;

public class RLConfig extends Configuration {
	public String LIBRARY_LANGUAGE;
	public String LIBRARY_SORTKEY;
	public String LIBRARY_MENUKEY;
	public String LIBRARY_SORTSEQ;
	public String[] SORTSEQ;
	public String STORAGE_TYPE;
	public String STORAGE_HOST;
	public String STORAGE_USERNAME;
	public String STORAGE_PASSWORD;
	public String STORAGE_DATABASE;
	public Boolean DEBUG_PERMISSIONS;
	public Boolean DEBUG_SORTINVENTORY;
	public Boolean DEBUG_ONENABLE;
	public Boolean DEBUG_KEYBOARD;
	public Boolean DEBUG_SQL;

	public RLConfig(File file) {
		super(file);
		if (!file.exists())
			loadFileFromJar(CONFIG_FILE);
		load();
		LIBRARY_LANGUAGE = getStringParm("Library.Language", "EN");
		LIBRARY_SORTKEY = getStringParm("Library.SortKey", "KEY_S");
		LIBRARY_MENUKEY = getStringParm("Library.MenuKey", "KEY_M");
		LIBRARY_SORTSEQ = getStringParm("Library.SortSEQ", "STONE,COBBLESTONE,DIRT,WOOD");
		
		SORTSEQ = LIBRARY_SORTSEQ.split(",");
		STORAGE_TYPE=getStringParm("Storage.Type", "SQLite");
		STORAGE_HOST=getStringParm("Storage.Host", "SQLite");
		STORAGE_USERNAME=getStringParm("Storage.Username", "Admin");
		STORAGE_PASSWORD=getStringParm("Storage.Password", "Changethis");
		STORAGE_DATABASE=getStringParm("Storage.Database", "SortInventory");
		DEBUG_PERMISSIONS = getBooleanParm("Debug.Permissions", false);
		DEBUG_SORTINVENTORY = getBooleanParm("Debug.Inventory", false);
		DEBUG_ONENABLE = getBooleanParm("Debug.OnEnable", false);
		DEBUG_KEYBOARD = getBooleanParm("Debug.Keyboard", false);
		DEBUG_SQL = getBooleanParm("Debug.SQL", false);
		setHeader(
				"###########################################################",
				"# This is an autogenerated config.yml, because you had an #",
				"# old version of the config.yml. I recommended that you   #",
				"# backup your current config.yml and then delete it from  #",
				"# from the plugin directory and reload the server, to     #",
				"# get a fresh config.yml                                  #",
				"#                                                         #",
				"#                                                         #",
				"###########################################################");
		if (dosave) {
			RLMessages.showWarning("YOUR CONFIG.YML IS NOT UPTODATE");
			save();
		}
			
	}

	public static String CONFIG_FILE = "config.yml";
	public static RLConfig rLConfig;

	public static void setupConfig(Plugin plugin) {
		if (!plugin.getDataFolder().exists())
			plugin.getDataFolder().mkdirs();
		File configfile = new File(plugin.getDataFolder(),
				RLConfig.CONFIG_FILE);
		rLConfig = new RLConfig(configfile);
	}

	private Boolean dosave = false;

	private String getStringParm(String string, String def) {
		String str = getString(string);
		if (str == null) {
			dosave = true;
			RLMessages.showWarning("Missing parameter:" +string);
			return getString(string,def);
		} else
			return str;
	}

	private Boolean getBooleanParm(String string, Boolean def) {
		String str = getString(string);
		if (str == null) {
			dosave = true;
			RLMessages.showWarning("Missing parameter:" +string);
		} 
		return getBoolean(string,def);
	}

	private static File loadFileFromJar(String filename) {
		File actual = new File(RLPlugin.PLUGIN_FOLDER, filename);
		if (!actual.exists()) {
			InputStream input = RLConfig.class.getResourceAsStream("/"
					+ filename);
			if (input != null) {
				FileOutputStream output = null;
				try {
					output = new FileOutputStream(actual);
					byte[] buf = new byte[8192];
					int length = 0;

					while ((length = input.read(buf)) > 0) {
						output.write(buf, 0, length);
					}
					RLMessages.showWarning("The file: " + filename
							+ " has been created.");
				} catch (Exception e) {
					RLMessages.showStackTrace(e);
				} finally {
					try {
						input.close();
					} catch (Exception e) {
					}
					try {
						output.flush();
						output.close();
					} catch (Exception e) {
					}
				}
			}
		}
		return actual;
	}

}
